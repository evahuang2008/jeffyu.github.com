---
date: '2006-05-25 16:57:54'
layout: post
slug: '%e6%80%bb%e7%bb%93%e6%b5%8bdal%e7%9a%84%e4%b8%80%e4%ba%9b%e9%97%ae%e9%a2%98%e5%92%8c%e7%ad%96%e7%95%a5'
status: publish
title: 总结测DAL的一些问题和策略
wordpress_id: '57'
categories:
- Chinese
- Java
---

近来项目引入Unit Test,那么因为作为企业的应用,一般都是要跟数据库打交道,那么如何写DAL (Data Access Layer)的Unit Test呢?  
先说说测DAL,主要存在哪些问题 ([http://weblogs.asp.net/rosherove/articles/dbunittesting.aspx](http://weblogs.asp.net/rosherove/articles/dbunittesting.aspx)):  





  1. **Problem: Garbage Data (也就说产生所谓的测试垃圾数据),  **因为如果你一运行一个TestCase,你就在数据库中产生一条垃圾数据,造成了数据库状态的不一致,从而也就阻碍了Unit Test的repeatable.


  2. **Problem: Affecting other tests (对其他TestMethod的影响),  **其实这一点说的也是对于数据状态保持不一致,怎么说?因为我们在对数据库进行CRUD的时候,是对数据状态产生了变化,比如说,你可能对同一条数据既执行 Delete,又执行Update的操作,那如果顺序刚好是先执行Delete,再执行Update,这个Test Case肯定失败,这样就造成了Affect Other Tests.


  3. **Problem: starting tests from a known state (需要数据库中存在有预先准备好的数据)**
在实际操作中,主要有如下三种方式:  





  1.  Mock Object :用模拟对象的方式,这样就不用连真实的数据库,但是这个策略很适合测试框架型结构,比如Spring就是用EasyMock来测的,但是这个策略不连数据库就没法证实自己所写的SQL语句是否正确?


  2. Reset Database: 这种策略就是在Java中存在DBunit的包,你先用xml来配置测试数据( seed file ), 这些文件会在 run 每个 test case 之前,插入数据; 在每个 test case 之后,删除这些seed file之中的数据; 这种策略存在的麻烦就是比较繁琐,因为还要写xml文件,尽管xml挺简单的(当然了,据说多表关联会比较繁琐),但是对于Unit Test这种我们追求尽量简单的方式,还是觉得比较不舒服,尽管有挺多人喜欢这种策略.( 因为如果Unit Test一复杂,那么Unit Test就有可能出错,那么我们是否需要写Unit Test的Unit Test呢??无限循环....)


  3. Transaction Control: 事务控制,我记得我前段时间有在我的blog上发过这个策略,(那次是我在TSS的论坛上问的),那么,就是在你 run 每个test method之前呢? connection的autoCommit是设置成false,在test method之后,在rollback回去,很容易的保证了数据库状态的一致性. (但是这种策略有时候比如我们用数据库的auto increment的来做主键,因为经常是用数据库的sequence,那么这个没办法回滚,当然了,我们这个时候可以使用mock的sequence来解决这个问题).还有个,这个策略可能对于一些旧的,设计不好的系统,没办法使用这个策略,但从目前来看,我确实最中意这个策略. ;-)  

今天(现在应该说是昨天. ;-) )花了很久时间去看,搜索,思考还有没有其他更完美的解决方案??现在想想,目前确实没了,在.NET里请参考(http: //weblogs.asp.net/rosherove/articles/dbunittesting.aspx),但我觉得这种其实也是 Transcation Control的变体. 今天还在思考个问题,就是Unit Test强调 Test Case之间的 independent,那么比如说我要测试个Create的方法,我一定会调用get()方法来校验他的结果准确性,那么这样做不就存在了Create 和 Retrieve的依赖了吗?? 看是不管我是看 <pragmatic Unit Test with Java>还是看其他的,好像都没有更完美的方案,今天看到一老外说了,他也说他觉得这两个依赖让他觉得不爽,但是他又说,这样的依赖(不是非常大)其实还是可以忍受的,还是可行的,因为我们已经有专门的测试 Retrieve的 Test Case作为保证了....  
  
好了,关于Unit Test的先总结这么多了,总结完心情爽多了.:-),感觉把这几天看的思路又整理了一遍,嘿嘿.....  
发现Unit Test还真实一个挺大的东西,要想把Unit Test和 Continous Integration做好,不是很容易......  

