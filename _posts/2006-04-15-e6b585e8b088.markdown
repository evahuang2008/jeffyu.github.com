---
date: '2006-04-15 19:30:12'
layout: post
slug: '%e6%b5%85%e8%b0%88'
status: publish
title: 浅谈
wordpress_id: '66'
categories:
- Ruby
---

终于还是忍不住新技术的诱惑(太多太多的人开始看Ruby了,不管是不是牛人),这三四天,我一有空就看<Programing Ruby>和<Agile Web Development With Rails>,晚上终于看完了(确定的说是粗略的浏览完了,要不,哪能在那么短的时间里看完两本枕头厚的书籍).  
 先说说Ruby吧,其实,我对学习一门新语言会觉得挺枯燥的,特别是刚开始的时候,因为都是描写那些: 类型,控制流程,方法定义,类定义等东西,很多时候他们只是换了个英文单词来描写,当然了,也还是有些新东西的.  
  1. 一切皆是对象.  
    就比如用Java获取一个数字的绝对值,是要: Math.abs(-12);  
    在Ruby中是: (-12).abs 这里就把绝对值当作是 -12这个对象的一个方法,属性.  
  2. 变量不用指定类型.  
    在Java中, String name = "test";  
    在Ruby中, name = "test";  
  3. 方法的命名规范.  
    在Java中,方法一般是命名成: isValidStatus()  
    在Ruby中,则会命名成: is_valid_status()  
    我更喜欢ruby的这种命名规范,因为我觉得更容易读懂,我个人最希望的是,以后我们可以code as documentation.读code跟读文档一样.  
  4. Iterator and Block  
    这两个特别是后面的Block这种方式是Ruby中大家都觉得比较好的一个方式,不过我目前还没深刻体会到,因为我毕竟还没开始真正的项目code.  
    我记得Martin Fowler曾经还就这个写过一个Closure的Blog.  
  5. module  
    1. module可以当作一个NameSpacing(名字空间)来使用  
    2. mixin  
     Ruby也是一个只支持单继承的语言,那么如何来实现多继承呢?就用 mix in,就是include你这个Module,就可以使用你那个Include的Module的所有方法,很像Java当中的composite方式.  
  6. Array和Hash  
   在Ruby中,并没有像Java那么复杂,没有很多Collection or Map的实现,这里的Collection一般就这两个.Array就是相当于Java中的Array,那么Hash就相当于Map.  
  7. 支持正则表达式  
    
  Ruby就先说这么多吧,其实如果说没有Rail的话,我对Ruby不会非常感兴趣,就算尽管我看完了Programming Ruby这本书.  
  <AWDWR>这本书这次获得了Jolt大奖,写的确实不错,我看这本书远比看 <PR>这本书感兴趣.  
  一是因为<AWDWR>这本书主要是讲Ruby的应用,二而且是讲Ruby在Web开发中的应用,因为毕竟我从刚开始工作后就是一直在跟WEB打交道.  
  我觉得Rails这个框架其实就是采用了 MVC + Active Record的这种模式,(这个思想在Java的应用中应该随处可见),在当前的Java世界里,框架,模式很多.. (所以我觉得如果是个刚学语言的人,还是要先学Java,这样再来学Ruby就比较好些,特别是当前Ruby的东西远比Java的东西丰富和成熟).  
  Ruby On Rail为什么会这么火呢?  
  其中最主要的原因是开发速度快,大家已经受够了J2EE的开发,特别是有涉及到EJB的开发,那个 build/deploy/test的周期太长了,而且还要部署等,太复杂了,所以,用Java做小项目,如果公司没有积累框架的话,开发速度是很慢的.  
  Rails的一个理念就是: Convention Over Configuration (约定胜于配置)  
  是的,配置文件太多了,XML文件也太多了,如果你用struts + Spring + hibernate,请你看看你的 xml文件,多到你恐怖,多到你吓人,如果你再用sturts-tiles的话,那么你的xml文件就更多了.多写一行代码代表你又多了一个可能出现Bug的地方.多了一个配置文件,也代表着你多了一处出现Bug的地方.那么,我们为什么不能做个规定或者约定呢,很多时候只是命名的习惯,没必要搞的那么灵活,那么复杂.  
    
  Rails就是基于这种philosopy的,而且他的文件目录结构等,都是用rail的一些自动工具生成,我们所关心的是实现我们所想要的业务逻辑.  
  其实Rails这个框架或许直接可以用 MVC来说.  
  View这层呢,是以  .rhtml文件结尾的 html + ruby的文件, 很类似( html + jsp)  
  Controller这层呢,很类似 Java中的Servlet,但他省略去了配置web.xml,以及struts-config.xml等文件?那他怎么找呢?  
  著名的Convention.  
   比如说有个URL是: [http://your.url/store/login](http://your.url/store/login)  
  那么他就默认Controller就是: store_controller.rb  
  那么这个URL调用的是controller中的 login method.  
  想想如果是用Java,我们是不是得用2个xml文件来配置呢??  
  最后说到Model这一层,Model这一层他同时也是Action Record,他已经把Model.  
  看看Java当中的Action Record的是怎么做的?  
  我们经常要定义个POJO,也就是一个简单的一些get,set方法,然后呢,我们还要定义一个DAO来操作这个对象. 因为DAO这一层要建立起数据库表字段和我们Model之间的关系.  
  但是在Rails中,我们只需要一个POJO(很多时候这个POJO也不需要定义get set方法,为什么呢?因为他的字段名和数据库的字段名是以一个规则来定义的,既然都知道了  
  表的字段,当然也就知道了属性名.是不是又省了一部重复代码),所以很多时候在Model里面,我们真正放的是,我们的业务逻辑和对数据库所对应表结构的一些查询.(感觉有点  
  把Domain Model 和 DAO Manager放在一起了? )  
    
  还有在看Rails框架的时候,我看到了框架中有很多的hooks.很像在Java世界里我们用AOP的Interceptor.就比如你可以在create()方法保存对象到数据库的时候,rails让你可以在此之前他会调用before_at_create(),默认是为空的实现.你可以进行override它.  
    
  还有重要一点就是Rails的服务器很轻型,你改什么Controller,Active Record好像都不用重启,他自动装载,而且服务启动太快了.....  
    
   最后,不过我目前还是觉得Ruby还没法胜任企业的大型的应用,因为一是内容太少,框架太少等,在这方面他目前无法与Java相提并论,但是他的一个好处就是开发速度快,  
  所以准备以后自己要用的小项目,小东西都用Ruby开发....




  明天,哦不,今天就准备试试看Ruby On Rail行不行.....  
    
  附上几个很链接: [Why Ruby on Rails won't become mainstream](http://beust.com/weblog/archives/000382.html)




                          _[Are you sure you want to be mainstream](http://www.loudthinking.com/arc/000584.html)_




                         [Rails作者的经历.](http://forum.javaeye.com/viewtopic.php?t=19170) 
