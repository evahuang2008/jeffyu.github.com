---
date: '2005-06-02 11:09:01'
layout: post
slug: '%e5%af%b9domainobject%e7%9a%84%e6%80%9d%e8%80%83'
status: publish
title: 对DomainObject的思考
wordpress_id: '130'
categories:
- Java
---

   今天重新在javaeye论坛上看了DomainObject的讨论([http://forum.javaeye.com/viewtopic.php?t=11712](http://forum.javaeye.com/viewtopic.php?t=11712)),并且重新翻阅了martin fowler的关于贫血DomainObject([http://www.martinfowler.com/bliki/AnemicDomainModel.html](http://www.martinfowler.com/bliki/AnemicDomainModel.html))的文章,再结合当时自己所做项目时,感觉自己当时很多时候写的都是贫血的DomainObject，也就是对象里面只有简单的get/set方法,而没有这个对象的一些行为.而很多时候对业务逻辑的实现放在service层来实现,(因为你service层跟Dao打交道,那么对业务的实现好像感觉比较直接些,特别是有些时候需要操作数据库)其实,我的这种思想是不对的,这么一做,那么我们的对象他的功能其实只是个数据保存器.  
  摘自eric对于service和domain model这两层的一些描述:  
   service layer :Defines the jobs the software is supposed to do and directs the expressive domain objects to work out problems. The tasks this layer is responsible for are meaningful to the business or necessary for interaction with the application layers of other systems. This layer is kept thin. It does not contain business rules or knowledge, but only coordinates tasks and delegates work to collaborations of domain objects in the next layer down. It does not have state reflecting the business situation, but it can have state that reflects the progress of a task for the user or the program.

_    _service层主要负责让其他层调有,比如页面表示层。这一层应该尽量薄,这一层不应该控制业务逻辑规则.  
  domain layer:Responsible for representing concepts of the business, information about the business situation, and business rules. State that reflects the business situation is controlled and used here, even though the technical details of storing it are delegated to the infrastructure. This layer is the heart of business software.  
_   
 _在domain这一层应该也要实现业务的规则，逻辑，而并不只是简单的数据保存器。但是比如说这个业务规则要设计到修改数据库的时候,那么这个时候要分派给其他层,我们要保证这个domain不对Dao等存在依赖性，以便更好的复用.  
    
  总得来说,我是比较同意Robbin的第二种做法.(javaeye上的那篇文章),其实我觉得如果有时候业务规则只是简单的不需要涉及到其他比如dao层的操作,那么我们经常就会放在domain object里面，但是有时候比如这个业务规则本身就比较复杂时,又或者比较经常操作dao的时候,我们可能会觉得放在service这层会比较方便,比较好操作.  
  在这个问题上,Rod Johnson提出原则是“case by case”，可重用度高的，和domain object状态密切关联的放在domain object中，可重用度低的，和domain object状态没有密切关联的放在service中。 Robbin提出的原则是：看业务方法是否显式的依赖持久化。我觉得比较支持前者.  
    
  在这个讨论中,pareth提出了实体对象和实体控制对象的说法,而且这个实体控制对象可以依赖Dao，我个人觉得这样好像有点象service层了？？？.....我不大支持这种做法.......  
   更详细的看论坛的帖子.......  
 
